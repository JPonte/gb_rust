use crate::{addr::AddrSpace, cpu::CPU};

pub fn print_instr_info(opcode: u8, cpu: &CPU, addr_space: &AddrSpace) {
    println!(
        "{:#02x}: ({:02x}) {} / CPU: {} / Stack: {:02x}{:02x} / Next: {:02x}, {:02x}",
        cpu.pc - 1,
        opcode,
        instr_name(cpu.pc - 1, cpu, addr_space).0,
        cpu,
        addr_space.read(cpu.sp),
        addr_space.read(cpu.sp + 1),
        addr_space.read(cpu.pc),
        addr_space.read(cpu.pc + 1)
    );
}

pub fn instr_name(addr: u16, cpu: &CPU, addr_space: &AddrSpace) -> (String, u16) {
    let opcode = addr_space.read(addr);
    let (instr, len) = match opcode {
        0x7F => ("LD A, A".to_string(), 2),
        0x78 => ("LD A, B".to_string(), 2),
        0x79 => ("LD A, C".to_string(), 2),
        0x7A => ("LD A, D".to_string(), 2),
        0x7B => ("LD A, E".to_string(), 2),
        0x7C => ("LD A, H".to_string(), 2),
        0x7D => ("LD A, L".to_string(), 2),
        0x47 => ("LD B, A".to_string(), 2),
        0x40 => ("LD B, B".to_string(), 2),
        0x41 => ("LD B, C".to_string(), 2),
        0x42 => ("LD B, D".to_string(), 2),
        0x43 => ("LD B, E".to_string(), 2),
        0x44 => ("LD B, H".to_string(), 2),
        0x45 => ("LD B, L".to_string(), 2),
        0x4F => ("LD C, A".to_string(), 2),
        0x48 => ("LD C, B".to_string(), 2),
        0x49 => ("LD C, C".to_string(), 2),
        0x4A => ("LD C, D".to_string(), 2),
        0x4B => ("LD C, E".to_string(), 2),
        0x4C => ("LD C, H".to_string(), 2),
        0x4D => ("LD C, L".to_string(), 2),
        0x57 => ("LD D, A".to_string(), 2),
        0x50 => ("LD D, B".to_string(), 2),
        0x51 => ("LD D, C".to_string(), 2),
        0x52 => ("LD D, D".to_string(), 2),
        0x53 => ("LD D, E".to_string(), 2),
        0x54 => ("LD D, H".to_string(), 2),
        0x55 => ("LD D, L".to_string(), 2),
        0x5F => ("LD E, A".to_string(), 2),
        0x58 => ("LD E, B".to_string(), 2),
        0x59 => ("LD E, C".to_string(), 2),
        0x5A => ("LD E, D".to_string(), 2),
        0x5B => ("LD E, E".to_string(), 2),
        0x5C => ("LD E, H".to_string(), 2),
        0x5D => ("LD E, L".to_string(), 2),
        0x67 => ("LD H, A".to_string(), 2),
        0x60 => ("LD H, B".to_string(), 2),
        0x61 => ("LD H, C".to_string(), 2),
        0x62 => ("LD H, D".to_string(), 2),
        0x63 => ("LD H, E".to_string(), 2),
        0x64 => ("LD H, H".to_string(), 2),
        0x65 => ("LD H, L".to_string(), 2),
        0x6F => ("LD L, A".to_string(), 2),
        0x68 => ("LD L, B".to_string(), 2),
        0x69 => ("LD L, C".to_string(), 2),
        0x6A => ("LD L, D".to_string(), 2),
        0x6B => ("LD L, E".to_string(), 2),
        0x6C => ("LD L, H".to_string(), 2),
        0x6D => ("LD L, L".to_string(), 2),
        0x3E => (format!("LD A, {}", addr_space.read(addr + 1)), 2),
        0x06 => (format!("LD B, {}", addr_space.read(addr + 1)), 2),
        0x0E => (format!("LD C, {}", addr_space.read(addr + 1)), 2),
        0x16 => (format!("LD D, {}", addr_space.read(addr + 1)), 2),
        0x1E => (format!("LD E, {}", addr_space.read(addr + 1)), 2),
        0x26 => (format!("LD H, {}", addr_space.read(addr + 1)), 2),
        0x2E => (format!("LD L, {}", addr_space.read(addr + 1)), 2),
        0x7E => (format!("LD A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x46 => (format!("LD B, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x4E => (format!("LD C, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x56 => (format!("LD D, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x5E => (format!("LD E, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x66 => (format!("LD H, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x6E => (format!("LD L, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0x77 => (format!("LD (HL), A ;{}", addr_space.read(cpu.hl())), 1),
        0x70 => (format!("LD (HL), B ;{}", addr_space.read(cpu.hl())), 1),
        0x71 => (format!("LD (HL), C ;{}", addr_space.read(cpu.hl())), 1),
        0x72 => (format!("LD (HL), D ;{}", addr_space.read(cpu.hl())), 1),
        0x73 => (format!("LD (HL), E ;{}", addr_space.read(cpu.hl())), 1),
        0x74 => (format!("LD (HL), H ;{}", addr_space.read(cpu.hl())), 1),
        0x75 => (format!("LD (HL), L ;{}", addr_space.read(cpu.hl())), 1),
        0x01 => (format!("LD BC, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0x11 => (format!("LD DE, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0x21 => (format!("LD HL, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0x31 => (format!("LD SP, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xF5 => ("PUSH AF".to_string(), 1),
        0xC5 => ("PUSH BC".to_string(), 1),
        0xD5 => ("PUSH DE".to_string(), 1),
        0xE5 => ("PUSH HL".to_string(), 1),
        0xF1 => ("POP AF".to_string(), 1),
        0xC1 => ("POP BC".to_string(), 1),
        0xD1 => ("POP DE".to_string(), 1),
        0xE1 => ("POP HL".to_string(), 1),
        0x36 => (format!("LD (HL), {} ;{:02x}", addr_space.read(addr + 1), addr_space.read(cpu.hl())), 2),
        0x0A => ("LD A BC".to_string(), 1),
        0x1A => ("LD A DE".to_string(), 1),
        0x02 => ("LD BC A".to_string(), 1),
        0x12 => ("LD DE A".to_string(), 1),
        0xFA => (format!("LD A, ({:02x}{:02x})", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xEA => (format!("LD ({:02x}{:02x}), A", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xF2 => ("LDH A C".to_string(), 1),
        0xE2 => ("LDH C A".to_string(), 1),
        0xF0 => (format!("LDH A, {:02x}", addr_space.read(addr + 1)), 2),
        0xE0 => (format!("LDH {:02x}, A", addr_space.read(addr + 1)), 2),
        0x3A => ("LD A, (HL-)".to_string(), 1),
        0x32 => ("LD (HL-) A".to_string(), 1),
        0x2A => ("LD A (HL+)".to_string(), 1),
        0x22 => ("LD (HL+) A".to_string(), 1),
        0x08 => (format!("LD ({:02x}{:02x}), SP", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xF8 => (format!("LDHL SP, {:02x}", addr_space.read(addr + 1)), 2),
        0xF9 => ("LD SP, (HL)".to_string(), 1),
        0x87 => ("ADD A, A".to_string(), 2),
        0x80 => ("ADD A, B".to_string(), 2),
        0x81 => ("ADD A, B".to_string(), 2),
        0x82 => ("ADD A, C".to_string(), 2),
        0x83 => ("ADD A, D".to_string(), 2),
        0x84 => ("ADD A, E".to_string(), 2),
        0x85 => ("ADD A, H".to_string(), 2),
        0x86 => (format!("ADD A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xC6 => (format!("ADD A #{:02x}", addr_space.read(addr + 1)), 2),
        0x8F => ("ADC A, A".to_string(), 2),
        0x88 => ("ADC A, B".to_string(), 2),
        0x89 => ("ADC A, B".to_string(), 2),
        0x8A => ("ADC A, C".to_string(), 2),
        0x8B => ("ADC A, D".to_string(), 2),
        0x8C => ("ADC A, E".to_string(), 2),
        0x8D => ("ADC A, H".to_string(), 2),
        0x8E => (format!("ADC A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xCE => (format!("ADC A #{:02x}", addr_space.read(addr + 1)), 2),
        0x97 => ("SUB A, A".to_string(), 2),
        0x90 => ("SUB A, B".to_string(), 2),
        0x91 => ("SUB A, B".to_string(), 2),
        0x92 => ("SUB A, C".to_string(), 2),
        0x93 => ("SUB A, D".to_string(), 2),
        0x94 => ("SUB A, E".to_string(), 2),
        0x95 => ("SUB A, H".to_string(), 2),
        0x96 => (format!("SUB A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xD6 => (format!("SUB A #{:02x}", addr_space.read(addr + 1)), 2),
        0x9F => ("SBC A, A".to_string(), 2),
        0x98 => ("SBC A, B".to_string(), 2),
        0x99 => ("SBC A, B".to_string(), 2),
        0x9A => ("SBC A, C".to_string(), 2),
        0x9B => ("SBC A, D".to_string(), 2),
        0x9C => ("SBC A, E".to_string(), 2),
        0x9D => ("SBC A, H".to_string(), 2),
        0x9E => (format!("SBC A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xDE => (format!("SBC A #{:02x}", addr_space.read(addr + 1)), 2),
        0xA7 => ("ABD A, A".to_string(), 2),
        0xA0 => ("ABD A, B".to_string(), 2),
        0xA1 => ("ABD A, B".to_string(), 2),
        0xA2 => ("ABD A, C".to_string(), 2),
        0xA3 => ("ABD A, D".to_string(), 2),
        0xA4 => ("ABD A, E".to_string(), 2),
        0xA5 => ("ABD A, H".to_string(), 2),
        0xA6 => (format!("ABD A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xE6 => (format!("ABD A #{:02x}", addr_space.read(addr + 1)), 2),
        0xB7 => ("OR A, A".to_string(), 2),
        0xB0 => ("OR A, B".to_string(), 2),
        0xB1 => ("OR A, B".to_string(), 2),
        0xB2 => ("OR A, C".to_string(), 2),
        0xB3 => ("OR A, D".to_string(), 2),
        0xB4 => ("OR A, E".to_string(), 2),
        0xB5 => ("OR A, H".to_string(), 2),
        0xB6 => (format!("OR A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xF6 => (format!("OR A #{:02x}", addr_space.read(addr + 1)), 2),
        0xAF => ("XOR A, A".to_string(), 2),
        0xA8 => ("XOR A, B".to_string(), 2),
        0xA9 => ("XOR A, B".to_string(), 2),
        0xAA => ("XOR A, C".to_string(), 2),
        0xAB => ("XOR A, D".to_string(), 2),
        0xAC => ("XOR A, E".to_string(), 2),
        0xAD => ("XOR A, H".to_string(), 2),
        0xAE => (format!("XOR A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xEE => (format!("XOR A #{:02x}", addr_space.read(addr + 1)), 2),
        0xBF => ("CP A, A".to_string(), 2),
        0xB8 => ("CP A, B".to_string(), 2),
        0xB9 => ("CP A, B".to_string(), 2),
        0xBA => ("CP A, C".to_string(), 2),
        0xBB => ("CP A, D".to_string(), 2),
        0xBC => ("CP A, E".to_string(), 2),
        0xBD => ("CP A, H".to_string(), 2),
        0xBE => (format!("CP A, (HL) ;{}", addr_space.read(cpu.hl())), 1),
        0xFE => (format!("CP A #{:02x}", addr_space.read(addr + 1)), 2),
        0x3C => ("INC A".to_string(), 1),
        0x04 => ("INC B".to_string(), 1),
        0x0C => ("INC C".to_string(), 1),
        0x14 => ("INC D".to_string(), 1),
        0x1C => ("INC E".to_string(), 1),
        0x24 => ("INC H".to_string(), 1),
        0x2C => ("INC L".to_string(), 1),
        0x34 => ("INC HL".to_string(), 1),
        0x3D => ("DEC A".to_string(), 1),
        0x05 => ("DEC B".to_string(), 1),
        0x0D => ("DEC C".to_string(), 1),
        0x15 => ("DEC D".to_string(), 1),
        0x1D => ("DEC E".to_string(), 1),
        0x25 => ("DEC H".to_string(), 1),
        0x2D => ("DEC L".to_string(), 1),
        0x35 => ("DEC HL".to_string(), 1),
        0x09 => ("ADD HL, BC".to_string(), 1),
        0x19 => ("ADD HL, DE".to_string(), 1),
        0x29 => ("ADD HL, HL".to_string(), 1),
        0x39 => ("ADD HL, SP".to_string(), 1),
        0xE8 => (format!("ADD SP #{:02x}", addr_space.read(addr + 1)), 2),
        0x03 => ("INC BC".to_string(), 1),
        0x13 => ("INC DE".to_string(), 1),
        0x23 => ("INC rHL".to_string(), 1),
        0x33 => ("INC SP".to_string(), 1),
        0x0B => ("DEC BC".to_string(), 1),
        0x1B => ("DEC DE".to_string(), 1),
        0x2B => ("DEC rHL".to_string(), 1),
        0x3B => ("DEC SP".to_string(), 1),
        0xC3 => (format!("JP {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0x18 => (format!("JR {:02x}", addr_space.read(addr + 2) as i8), 2),
        0xE9 => ("JP HL".to_string(), 1),
        0x20 => (format!("JR NZ, {:02x}", addr_space.read(addr + 2) as i8), 2),
        0x28 => (format!("JR Z, {:02x}", addr_space.read(addr + 2) as i8), 2),
        0x30 => (format!("JR NC, {:02x}", addr_space.read(addr + 2) as i8), 2),
        0x38 => (format!("JR C, {:02x}", addr_space.read(addr + 2) as i8), 2),
        0xC2 => (format!("JP NZ, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xCA => (format!("JP Z, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xD2 => (format!("JP NC, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xDA => (format!("JP C, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xCD => (format!("CALL {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xC4 => (format!("CALL NZ, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xD4 => (format!("CALL Z, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xCC => (format!("CALL NC, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xDC => (format!("CALL C, {:02x}{:02x}", addr_space.read(addr + 2), addr_space.read(addr + 1)), 3),
        0xF3 => ("DI".to_string(), 1),
        0xC9 => ("RET".to_string(), 1),
        0xC0 => ("RET NZ".to_string(), 1),
        0xC8 => ("RET Z".to_string(), 1),
        0xD0 => ("RET NC".to_string(), 1),
        0xD8 => ("RET C".to_string(), 1),
        0x17 => ("RLA".to_string(), 1),
        0x1F => ("RRA".to_string(), 2),
        0xFB => ("EI".to_string(), 1),
        0x2F => ("CPL".to_string(), 1),
        0xC7 => ("RST 00".to_string(), 1),
        0xCF => ("RST 08".to_string(), 1),
        0xD7 => ("RST 10".to_string(), 1),
        0xDF => ("RST 18".to_string(), 1),
        0xE7 => ("RST 20".to_string(), 1),
        0xEF => ("RST 28".to_string(), 1),
        0xF7 => ("RST 30".to_string(), 1),
        0xFF => ("RST 38".to_string(), 1),
        0xD9 => ("RETI".to_string(), 1),
        0x37 => ("SCF".to_string(), 1),
        0x3F => ("CCF".to_string(), 1),
        0x07 => ("RLCA".to_string(), 1),
        0x0F => ("RRCA".to_string(), 1),
        0x00 => ("NOP".to_string(), 1),
        0x10 => ("STOP".to_string(), 1),
        0x76 => ("HALT".to_string(), 1),
        0x27 => ("DAA".to_string(), 1),
        0xD3 | 0xE3 | 0xE4 | 0xF4 | 0xDB | 0xDD | 0xEB | 0xEC | 0xED | 0xFC | 0xFD => {
            ("INV".to_string(), 1)
        }
        0xCB => match addr_space.read(addr + 1) {
            0x07 => ("RLC A".to_string(), 2),
            0x00 => ("RLC B".to_string(), 2),
            0x01 => ("RLC C".to_string(), 2),
            0x02 => ("RLC D".to_string(), 2),
            0x03 => ("RLC E".to_string(), 2),
            0x04 => ("RLC H".to_string(), 2),
            0x05 => ("RLC L".to_string(), 2),
            0x06 => ("RLC (HL)".to_string(), 2),
            0x17 => ("RL A".to_string(), 2),
            0x10 => ("RL B".to_string(), 2),
            0x11 => ("RL C".to_string(), 2),
            0x12 => ("RL D".to_string(), 2),
            0x13 => ("RL E".to_string(), 2),
            0x14 => ("RL H".to_string(), 2),
            0x15 => ("RL L".to_string(), 2),
            0x16 => ("rl (HL)".to_string(), 2),
            0x37 => ("SWAP A".to_string(), 2),
            0x30 => ("SWAP B".to_string(), 2),
            0x31 => ("SWAP C".to_string(), 2),
            0x32 => ("SWAP D".to_string(), 2),
            0x33 => ("SWAP E".to_string(), 2),
            0x34 => ("SWAP H".to_string(), 2),
            0x35 => ("SWAP L".to_string(), 2),
            0x36 => ("SWAP (HL)".to_string(), 2),
            0x87 => ("RES 0, A".to_string(), 2),
            0x80 => ("RES 0, B".to_string(), 2),
            0x81 => ("RES 0, C".to_string(), 2),
            0x82 => ("RES 0, D".to_string(), 2),
            0x83 => ("RES 0, E".to_string(), 2),
            0x84 => ("RES 0, H".to_string(), 2),
            0x85 => ("RES 0, L".to_string(), 2),
            0x8F => ("RES 1, A".to_string(), 2),
            0x88 => ("RES 1, B".to_string(), 2),
            0x89 => ("RES 1, C".to_string(), 2),
            0x8A => ("RES 1, D".to_string(), 2),
            0x8B => ("RES 1, E".to_string(), 2),
            0x8C => ("RES 1, H".to_string(), 2),
            0x8D => ("RES 1, L".to_string(), 2),
            0x97 => ("RES 2, A".to_string(), 2),
            0x90 => ("RES 2, B".to_string(), 2),
            0x91 => ("RES 2, C".to_string(), 2),
            0x92 => ("RES 2, D".to_string(), 2),
            0x93 => ("RES 2, E".to_string(), 2),
            0x94 => ("RES 2, H".to_string(), 2),
            0x95 => ("RES 2, L".to_string(), 2),
            0x9F => ("RES 3, A".to_string(), 2),
            0x98 => ("RES 3, B".to_string(), 2),
            0x99 => ("RES 3, C".to_string(), 2),
            0x9A => ("RES 3, D".to_string(), 2),
            0x9B => ("RES 3, E".to_string(), 2),
            0x9C => ("RES 3, H".to_string(), 2),
            0x9D => ("RES 3, L".to_string(), 2),
            0xA7 => ("RES 4, A".to_string(), 2),
            0xA0 => ("RES 4, B".to_string(), 2),
            0xA1 => ("RES 4, C".to_string(), 2),
            0xA2 => ("RES 4, D".to_string(), 2),
            0xA3 => ("RES 4, E".to_string(), 2),
            0xA4 => ("RES 4, H".to_string(), 2),
            0xA5 => ("RES 4, L".to_string(), 2),
            0xAF => ("RES 5, A".to_string(), 2),
            0xA8 => ("RES 5, B".to_string(), 2),
            0xA9 => ("RES 5, C".to_string(), 2),
            0xAA => ("RES 5, D".to_string(), 2),
            0xAB => ("RES 5, E".to_string(), 2),
            0xAC => ("RES 5, H".to_string(), 2),
            0xAD => ("RES 5, L".to_string(), 2),
            0xB7 => ("RES 6, A".to_string(), 2),
            0xB0 => ("RES 6, B".to_string(), 2),
            0xB1 => ("RES 6, C".to_string(), 2),
            0xB2 => ("RES 6, D".to_string(), 2),
            0xB3 => ("RES 6, E".to_string(), 2),
            0xB4 => ("RES 6, H".to_string(), 2),
            0xB5 => ("RES 6, L".to_string(), 2),
            0xBF => ("RES 7, A".to_string(), 2),
            0xB8 => ("RES 7, B".to_string(), 2),
            0xB9 => ("RES 7, C".to_string(), 2),
            0xBA => ("RES 7, D".to_string(), 2),
            0xBB => ("RES 7, E".to_string(), 2),
            0xBC => ("RES 7, H".to_string(), 2),
            0xBD => ("RES 7, L".to_string(), 2),
            0x86 => ("RES 0, (HL)".to_string(), 2),
            0x8E => ("RES 1, (HL)".to_string(), 2),
            0x96 => ("RES 2, (HL)".to_string(), 2),
            0x9E => ("RES 3, (HL)".to_string(), 2),
            0xA6 => ("RES 4, (HL)".to_string(), 2),
            0xAE => ("RES 5, (HL)".to_string(), 2),
            0xB6 => ("RES 6, (HL)".to_string(), 2),
            0xBE => ("RES 7, (HL)".to_string(), 2),
            0xC7 => ("SET 0, A".to_string(), 2),
            0xC0 => ("SET 0, B".to_string(), 2),
            0xC1 => ("SET 0, C".to_string(), 2),
            0xC2 => ("SET 0, D".to_string(), 2),
            0xC3 => ("SET 0, E".to_string(), 2),
            0xC4 => ("SET 0, H".to_string(), 2),
            0xC5 => ("SET 0, L".to_string(), 2),
            0xCF => ("SET 1, A".to_string(), 2),
            0xC8 => ("SET 1, B".to_string(), 2),
            0xC9 => ("SET 1, C".to_string(), 2),
            0xCA => ("SET 1, D".to_string(), 2),
            0xCB => ("SET 1, E".to_string(), 2),
            0xCC => ("SET 1, H".to_string(), 2),
            0xCD => ("SET 1, L".to_string(), 2),
            0xD7 => ("SET 2, A".to_string(), 2),
            0xD0 => ("SET 2, B".to_string(), 2),
            0xD1 => ("SET 2, C".to_string(), 2),
            0xD2 => ("SET 2, D".to_string(), 2),
            0xD3 => ("SET 2, E".to_string(), 2),
            0xD4 => ("SET 2, H".to_string(), 2),
            0xD5 => ("SET 2, L".to_string(), 2),
            0xDF => ("SET 3, A".to_string(), 2),
            0xD8 => ("SET 3, B".to_string(), 2),
            0xD9 => ("SET 3, C".to_string(), 2),
            0xDA => ("SET 3, D".to_string(), 2),
            0xDB => ("SET 3, E".to_string(), 2),
            0xDC => ("SET 3, H".to_string(), 2),
            0xDD => ("SET 3, L".to_string(), 2),
            0xE7 => ("SET 4, A".to_string(), 2),
            0xE0 => ("SET 4, B".to_string(), 2),
            0xE1 => ("SET 4, C".to_string(), 2),
            0xE2 => ("SET 4, D".to_string(), 2),
            0xE3 => ("SET 4, E".to_string(), 2),
            0xE4 => ("SET 4, H".to_string(), 2),
            0xE5 => ("SET 4, L".to_string(), 2),
            0xEF => ("SET 5, A".to_string(), 2),
            0xE8 => ("SET 5, B".to_string(), 2),
            0xE9 => ("SET 5, C".to_string(), 2),
            0xEA => ("SET 5, D".to_string(), 2),
            0xEB => ("SET 5, E".to_string(), 2),
            0xEC => ("SET 5, H".to_string(), 2),
            0xED => ("SET 5, L".to_string(), 2),
            0xF7 => ("SET 6, A".to_string(), 2),
            0xF0 => ("SET 6, B".to_string(), 2),
            0xF1 => ("SET 6, C".to_string(), 2),
            0xF2 => ("SET 6, D".to_string(), 2),
            0xF3 => ("SET 6, E".to_string(), 2),
            0xF4 => ("SET 6, H".to_string(), 2),
            0xF5 => ("SET 6, L".to_string(), 2),
            0xFF => ("SET 7, A".to_string(), 2),
            0xF8 => ("SET 7, B".to_string(), 2),
            0xF9 => ("SET 7, C".to_string(), 2),
            0xFA => ("SET 7, D".to_string(), 2),
            0xFB => ("SET 7, E".to_string(), 2),
            0xFC => ("SET 7, H".to_string(), 2),
            0xFD => ("SET 7, L".to_string(), 2),
            0xC6 => ("SET 0, (HL)".to_string(), 2),
            0xCE => ("SET 1, (HL)".to_string(), 2),
            0xD6 => ("SET 2, (HL)".to_string(), 2),
            0xDE => ("SET 3, (HL)".to_string(), 2),
            0xE6 => ("SET 4, (HL)".to_string(), 2),
            0xEE => ("SET 5, (HL)".to_string(), 2),
            0xF6 => ("SET 6, (HL)".to_string(), 2),
            0xFE => ("SET 7, (HL)".to_string(), 2),
            0x3F => ("SRL A".to_string(), 2),
            0x38 => ("SRL B".to_string(), 2),
            0x39 => ("SRL C".to_string(), 2),
            0x3A => ("SRL D".to_string(), 2),
            0x3B => ("SRL E".to_string(), 2),
            0x3C => ("SRL H".to_string(), 2),
            0x3D => ("SRL L".to_string(), 2),
            0x3E => ("SRL (HL)".to_string(), 2),
            0x0F => ("RRC A".to_string(), 2),
            0x08 => ("RRC B".to_string(), 2),
            0x09 => ("RRC C".to_string(), 2),
            0x0A => ("RRC D".to_string(), 2),
            0x0B => ("RRC E".to_string(), 2),
            0x0C => ("RRC H".to_string(), 2),
            0x0D => ("RRC L".to_string(), 2),
            0x0E => ("RRC (HL)".to_string(), 2),
            0x1F => ("RR A".to_string(), 2),
            0x18 => ("RR B".to_string(), 2),
            0x19 => ("RR C".to_string(), 2),
            0x1A => ("RR D".to_string(), 2),
            0x1B => ("RR E".to_string(), 2),
            0x1C => ("RR H".to_string(), 2),
            0x1D => ("RR L".to_string(), 2),
            0x1E => ("RR (HL)".to_string(), 2),
            0x27 => ("SLA A".to_string(), 2),
            0x20 => ("SLA B".to_string(), 2),
            0x21 => ("SLA C".to_string(), 2),
            0x22 => ("SLA D".to_string(), 2),
            0x23 => ("SLA E".to_string(), 2),
            0x24 => ("SLA H".to_string(), 2),
            0x25 => ("SLA L".to_string(), 2),
            0x26 => ("SLA (HL)".to_string(), 2),
            0x2F => ("SRA A".to_string(), 2),
            0x28 => ("SRA B".to_string(), 2),
            0x29 => ("SRA C".to_string(), 2),
            0x2A => ("SRA D".to_string(), 2),
            0x2B => ("SRA E".to_string(), 2),
            0x2C => ("SRA H".to_string(), 2),
            0x2D => ("SRA L".to_string(), 2),
            0x2E => ("SRA (HL)".to_string(), 2),
            0x40 => ("BIT 0, B".to_string(), 2),
            0x50 => ("BIT 2, B".to_string(), 2),
            0x60 => ("BIT 4, B".to_string(), 2),
            0x70 => ("BIT 6, B".to_string(), 2),
            0x41 => ("BIT 0, C".to_string(), 2),
            0x51 => ("BIT 2, C".to_string(), 2),
            0x61 => ("BIT 4, C".to_string(), 2),
            0x71 => ("BIT 6, C".to_string(), 2),
            0x42 => ("BIT 0, D".to_string(), 2),
            0x52 => ("BIT 2, D".to_string(), 2),
            0x62 => ("BIT 4, D".to_string(), 2),
            0x72 => ("BIT 6, D".to_string(), 2),
            0x43 => ("BIT 0, E".to_string(), 2),
            0x53 => ("BIT 2, E".to_string(), 2),
            0x63 => ("BIT 4, E".to_string(), 2),
            0x73 => ("BIT 6, E".to_string(), 2),
            0x44 => ("BIT 0, H".to_string(), 2),
            0x54 => ("BIT 2, H".to_string(), 2),
            0x64 => ("BIT 4, H".to_string(), 2),
            0x74 => ("BIT 6, H".to_string(), 2),
            0x45 => ("BIT 0, L".to_string(), 2),
            0x55 => ("BIT 2, L".to_string(), 2),
            0x65 => ("BIT 4, L".to_string(), 2),
            0x75 => ("BIT 6, L".to_string(), 2),
            0x47 => ("BIT 0, A".to_string(), 2),
            0x57 => ("BIT 2, A".to_string(), 2),
            0x67 => ("BIT 4, A".to_string(), 2),
            0x77 => ("BIT 6, A".to_string(), 2),
            0x48 => ("BIT 1, B".to_string(), 2),
            0x58 => ("BIT 3, B".to_string(), 2),
            0x68 => ("BIT 5, B".to_string(), 2),
            0x78 => ("BIT 7, B".to_string(), 2),
            0x49 => ("BIT 1, C".to_string(), 2),
            0x59 => ("BIT 3, C".to_string(), 2),
            0x69 => ("BIT 5, C".to_string(), 2),
            0x79 => ("BIT 7, C".to_string(), 2),
            0x4A => ("BIT 1, D".to_string(), 2),
            0x5A => ("BIT 3, D".to_string(), 2),
            0x6A => ("BIT 5, D".to_string(), 2),
            0x7A => ("BIT 7, D".to_string(), 2),
            0x4B => ("BIT 1, E".to_string(), 2),
            0x5B => ("BIT 3, E".to_string(), 2),
            0x6B => ("BIT 5, E".to_string(), 2),
            0x7B => ("BIT 7, E".to_string(), 2),
            0x4C => ("BIT 1, H".to_string(), 2),
            0x5C => ("BIT 3, H".to_string(), 2),
            0x6C => ("BIT 5, H".to_string(), 2),
            0x7C => ("BIT 7, H".to_string(), 2),
            0x4D => ("BIT 1, L".to_string(), 2),
            0x5D => ("BIT 3, L".to_string(), 2),
            0x6D => ("BIT 5, L".to_string(), 2),
            0x7D => ("BIT 7, L".to_string(), 2),
            0x4F => ("BIT 1, A".to_string(), 2),
            0x5F => ("BIT 3, A".to_string(), 2),
            0x6F => ("BIT 5, A".to_string(), 2),
            0x7F => ("BIT 7, A".to_string(), 2),
            0x46 => ("BIT 0, (HL)".to_string(), 2),
            0x56 => ("BIT 2, (HL)".to_string(), 2),
            0x66 => ("BIT 4, (HL)".to_string(), 2),
            0x76 => ("BIT 6, (HL)".to_string(), 2),
            0x4E => ("BIT 1, (HL)".to_string(), 2),
            0x5E => ("BIT 3, (HL)".to_string(), 2),
            0x6E => ("BIT 5, (HL)".to_string(), 2),
            0x7E => ("BIT 7, (HL)".to_string(), 2),
        },
    };
    let instr_codes = match len {
        1 => format!("({:02x}, __, __)", opcode),
        2 => format!("({:02x}, {:02x}, __)", opcode, addr_space.read(addr + 1)),
        _ => format!("({:02x}, {:02x}, {:02x})", opcode, addr_space.read(addr + 1), addr_space.read(addr + 2)),
    };
    (format!("{:04x} {} - {}", addr, instr_codes, instr).to_uppercase(), len)
}
